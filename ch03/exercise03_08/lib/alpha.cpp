 // alpha.cpp
 #include "alpha.h"
 #include <cstring>

 using namespace std;

 const short int alpha::collate_la[] = {    // Latin alphabet
    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15, // 00-0f
   16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31, // 10-1f
   32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47, // 20-2f 
   48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63, // 30-3f 
   64, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, // 40-4f 
  316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326,  91,  92,  93,  94,  95, // 50-5f 
   96,-301,-302,-303,-304,-305,-306,-307,-308,-309,-310,-311,-312,-313,-314,-315, // 60-6f 
 -316,-317,-318,-319,-320,-321,-322,-323,-324,-325,-326, 123, 124, 125, 126, 127, // 70-7f 
  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, // 80-8f 
  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, // 90-9f 
  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, // a0-af 
  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, // b0-bf 
  301, 301, 301, 301, 301, 301, 301, 303, 305, 305, 305, 305, 309, 309, 309, 309, // c0-cf
  208, 314, 315, 315, 315, 315, 315, 215, 315, 321, 321, 321, 321, 325, 222, 223, // d0-df 
 -301,-301,-301,-301,-301,-301,-301,-303,-305,-305,-305,-305,-309,-309,-309,-309, // e0-ef 
  240,-314,-315,-315,-315,-315,-315, 215,-315,-321,-321,-321,-321,-325, 254,-325};// f0-ff

 const short int alpha::collate_sv[] = {   // Swedish alphabet
    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15, // 00-0f
   16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31, // 10-1f
   32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47, // 20-2f 
   48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63, // 30-3f 
   64, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, // 40-4f 
  316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326,  91,  92,  93,  94,  95, // 50-5f 
   96,-301,-302,-303,-304,-305,-306,-307,-308,-309,-310,-311,-312,-313,-314,-315, // 60-6f 
 -316,-317,-318,-319,-320,-321,-322,-323,-324,-325,-326, 123, 124, 125, 126, 127, // 70-7f 
  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, // 80-8f 
  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, // 90-9f 
  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, // a0-af 
  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, // b0-bf 
  301, 301, 301, 301, 328, 327, 328, 303, 305, 305, 305, 305, 309, 309, 309, 309, // c0-cf
  208, 314, 315, 315, 315, 315, 329, 215, 329, 321, 321, 321, 321, 325, 222, 223, // d0-df 
 -301,-301,-301,-301,-328,-327,-328,-303,-305,-305,-305,-305,-309,-309,-309,-309, // e0-ef 
  240,-314,-315,-315,-315,-315,-329, 215,-329,-321,-321,-321,-321,-325, 254,-325};// f0-ff

 const short int alpha::collate_es[] = {    // Spanish alphabet
    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15, // 00-0f
   16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31, // 10-1f
   32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47, // 20-2f 
   48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63, // 30-3f 
   64, 301, 302, 303, 305, 306, 307, 308, 309, 310, 311, 312, 313, 315, 316, 318, // 40-4f
  319, 320, 321, 322, 323, 324, 325, 326, 327, 328, 329,  91,  92,  93,  94,  95, // 50-5f
   96,-301,-302,-303,-305,-306,-307,-308,-309,-310,-311,-312,-313,-315,-316,-318, // 60-6f
 -319,-320,-321,-322,-323,-324,-325,-326,-327,-328,-329, 123, 124, 125, 126, 127, // 70-7f
  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, // 80-8f 
  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, // 90-9f 
  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, // a0-af 
  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, // b0-bf 
  301, 301, 301, 301, 301, 301, 301, 303, 306, 306, 306, 306, 310, 310, 310, 310, // c0-cf
  208, 317, 318, 318, 318, 318, 318, 215, 318, 324, 324, 324, 324, 328, 222, 223, // d0-df 
 -301,-301,-301,-301,-301,-301,-301,-303,-306,-306,-306,-306,-310,-310,-310,-310, // e0-ef 
  240,-317,-318,-318,-318,-318,-318, 215,-318,-324,-324,-324,-324,-328, 254,-325};// f0-ff

const short int alpha::collate_de[] = {    // German alphabet
    0,   1,   2,   3,   4,   5,   6,   7,   8,   9,  10,  11,  12,  13,  14,  15, // 00-0f
   16,  17,  18,  19,  20,  21,  22,  23,  24,  25,  26,  27,  28,  29,  30,  31, // 10-1f
   32,  33,  34,  35,  36,  37,  38,  39,  40,  41,  42,  43,  44,  45,  46,  47, // 20-2f 
   48,  49,  50,  51,  52,  53,  54,  55,  56,  57,  58,  59,  60,  61,  62,  63, // 30-3f 
   64, 301, 302, 303, 304, 305, 306, 307, 308, 309, 310, 311, 312, 313, 314, 315, // 40-4f 
  316, 317, 318, 319, 320, 321, 322, 323, 324, 325, 326,  91,  92,  93,  94,  95, // 50-5f 
   96,-301,-302,-303,-304,-305,-306,-307,-308,-309,-310,-311,-312,-313,-314,-315, // 60-6f 
 -316,-317,-318,-319,-320,-321,-322,-323,-324,-325,-326, 123, 124, 125, 126, 127, // 70-7f 
  128, 129, 130, 131, 132, 133, 134, 135, 136, 137, 138, 139, 140, 141, 142, 143, // 80-8f 
  144, 145, 146, 147, 148, 149, 150, 151, 152, 153, 154, 155, 156, 157, 158, 159, // 90-9f 
  160, 161, 162, 163, 164, 165, 166, 167, 168, 169, 170, 171, 172, 173, 174, 175, // a0-af 
  176, 177, 178, 179, 180, 181, 182, 183, 184, 185, 186, 187, 188, 189, 190, 191, // b0-bf 
  301, 301, 301, 301, 301, 301, 301, 303, 305, 305, 305, 305, 309, 309, 309, 309, // c0-cf
  208, 314, 315, 315, 315, 315, 315, 215, 315, 321, 321, 321, 321, 325, 222,-319, // d0-df 
 -301,-301,-301,-301,-301,-301,-301,-303,-305,-305,-305,-305,-309,-309,-309,-309, // e0-ef 
  240,-314,-315,-315,-315,-315,-315, 215,-315,-321,-321,-321,-321,-325, 254,-325};// f0-ff

 const alpha::char_pair alpha::pair_es[] = { {'c', 'h', 304}, {'l', 'l', 314}, {'\0', '\0', '\0'} };

 void alpha::set_lang(const std::string lang) throw(std::invalid_argument) {
   if (lang.find("la") == 0 || lang.find("en") == 0 || 
       lang.find("fr") == 0 || lang.find("pt") == 0 || 
       lang.find("it") == 0) {
     collate = collate_la;
     pairs = 0;
     cmp = &alpha::cmp1;
     wcmp = &alpha::wcmp1;
   }
   else if (lang.find("es") == 0) {
     collate = collate_es;
     pairs = pair_es;
     cmp = &alpha::cmp2;
     wcmp = &alpha::wcmp2;
   }
   else if (lang.find("sv") == 0) {
     collate = collate_sv;
     pairs = 0;
     cmp = &alpha::cmp1;
     wcmp = &alpha::wcmp1;
   }
   else if (lang.find("de") == 0) {
     collate = collate_de;
     pairs = 0;
     cmp = &alpha::cmp1;
     wcmp = &alpha::wcmp1;
   }
   else
     throw std::invalid_argument("Unknown language code");
 }
 
 int alpha::cmp1 (const char* s1, const char* s2)
 {
    for (;*s1 && *s2 && abs(collate[(unsigned char) *s1])==abs(collate[(unsigned char) *s2])
         ;s1++, s2++) 
      ;
    return abs(collate[(unsigned char) *s1])< abs(collate[(unsigned char) *s2]) ? -1 : 
          (abs(collate[(unsigned char) *s1])==abs(collate[(unsigned char) *s2]) ?  0 : 1);           
 }

 int alpha::cmp2 (const char* s1, const char* s2)
 {
   int *ta = new int[strlen(s1)+1];
   int *tb = new int[strlen(s2)+1];
   int *t1=ta, *t2=tb;
   int result=0;
   translate(s1, t1);
   translate(s2, t2);
   for (;*t1>=0 && *t2>=0 && *t1 == *t2; t1++, t2++) 
     ;
   result =  *t1 < *t2 ? -1 : (*t1 == *t2 ? 0 : 1);
   delete[] ta;
   delete[] tb;
   return result;
 }

 void alpha::translate(const char *s, int *t) {
   const char_pair *p;
   for(;*s; s++) {
     for (p=pairs; p->c1; p++) 
       if (p->c1 == to_lower_case((unsigned char) *s) && p->c2 == to_lower_case((unsigned char) *(s+1))) {
         *t++ = p->no;
         s++;
       }
     if (!p->c1)
       *t++ = abs(collate[(unsigned char) *s]);
   }
   *t++ = -1;  // end marker
 }
 
    void alpha::to_upper_case(char *s)
   { 
     for (; *s; s++)
       *s = to_upper_case((unsigned char) *s);
   }

   void alpha::to_lower_case(char *s)
   { 
     for (; *s; s++)
       *s = to_lower_case((unsigned char) *s);
   }

   void alpha::to_upper_case(std::string& s)
   { 
     for (std::string::iterator i=s.begin(); i != s.end(); i++)
       *i = to_upper_case((unsigned char) *i);
   }

   void alpha::to_lower_case(std::string& s)
   { 
     for (std::string::iterator i=s.begin(); i != s.end(); i++)
       *i = to_lower_case((unsigned char) *i);
   }

// functions for wide characters

   void alpha::to_upper_case(wchar_t *s)
   { 
     for (; *s; s++)
       *s = to_upper_case(*s);
   }

   void alpha::to_lower_case(wchar_t *s)
   { 
     for (; *s; s++)
       *s = to_lower_case(*s);
   }

   void alpha::to_upper_case(std::wstring& s)
   { 
     for (std::wstring::iterator i=s.begin(); i != s.end(); i++)
       *i = to_upper_case(*i);
   }

   void alpha::to_lower_case(std::wstring& s)
   { 
     for (std::wstring::iterator i=s.begin(); i != s.end(); i++)
       *i = to_lower_case(*i);
   } 
 
   void alpha::narrow(const wchar_t *from, char* to) 
   {
      while ((*to++ = narrow(*from++)))
      ;
   }
 
   int alpha::wstrlen(const wchar_t *str)
   {
      const wchar_t *s;
      for (s = str; *s; ++s)
       ;
      return(s - str);
   }
    
 int alpha::wcmp1 (const wchar_t* s1, const wchar_t* s2)
 {
    for (;*s1 && *s2 && abs(collate[narrow(*s1)])==abs(collate[narrow(*s2)])
         ;s1++, s2++) 
      ;
    return abs(collate[narrow(*s1)])<  abs(collate[narrow(*s2)]) ? -1 : 
          (abs(collate[narrow(*s1)])== abs(collate[narrow(*s2)]) ?  0 : 1);           
 }
 
  int alpha::wcmp2 (const wchar_t* w1, const wchar_t* w2)
 {
    char *s1 = new char[wstrlen(w1)];
    char *s2 = new char[wstrlen(w2)];
    narrow(w1, s1);
    narrow(w2, s2);
    int result = cmp2(s1, s2);
    delete[] s1;
    delete[] s2;
    return result;
 }
   

